{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// Can persist a single mobx object.\n// For persisting an object with multiple mobx objects inside, look at\n// MobxPersistDict\n// For native, use localforage instead of localstorage\nimport { toJS, autorun } from \"mobx\";\nimport { set } from \"mobx\";\nexport var MobxPersist =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(key, observableInstance) {\n    var v;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            v = typeof localStorage !== \"undefined\" && localStorage.getItem(key);\n\n            if (v) {\n              // if (observableInstance.replace) observableInstance.replace(v);\n              // else if (typeof v === \"object\") {\n              //   Object.keys(v).forEach((k) => (observableInstance[k] = v[k]));\n              // } else observableInstance = v;\n              setTimeout(function () {\n                return set(observableInstance, JSON.parse(v));\n              }, 300);\n            }\n\n            autorun(function () {\n              // localStorage.setItem(key, change.object.toJSON());\n              // localStorage.setItem(key, change.newValue);\n              typeof localStorage !== \"undefined\" && localStorage.setItem(key, _JSON$stringify(toJS(observableInstance)));\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function MobxPersist(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/briandombrowski/Dev/Node/hookedjs/hookedjs/services/react/polyfills/MobxPersist.ts"],"names":["toJS","autorun","set","MobxPersist","key","observableInstance","v","localStorage","getItem","setTimeout","JSON","parse","setItem"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,SAAQA,IAAR,EAAcC,OAAd,QAA4B,MAA5B;AACA,SAAQC,GAAR,QAAkB,MAAlB;AAEA,OAAO,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,GAAP,EAAoBC,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBC,YAAAA,CAFmB,GAEf,OAAOC,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,CAACC,OAAb,CAAqBJ,GAArB,CAFxB;;AAGzB,gBAAIE,CAAJ,EAAO;AACL;AACA;AACA;AACA;AACAG,cAAAA,UAAU,CAAC;AAAA,uBAAMP,GAAG,CAACG,kBAAD,EAAqBK,IAAI,CAACC,KAAL,CAAWL,CAAX,CAArB,CAAT;AAAA,eAAD,EAA+C,GAA/C,CAAV;AACD;;AACDL,YAAAA,OAAO,CAAC,YAAM;AACZ;AACA;AACA,qBAAOM,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,CAACK,OAAb,CAAqBR,GAArB,EAA0B,gBAAeJ,IAAI,CAACK,kBAAD,CAAnB,CAA1B,CAAvC;AACD,aAJM,CAAP;;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["// Can persist a single mobx object.\n// For persisting an object with multiple mobx objects inside, look at\n// MobxPersistDict\n// For native, use localforage instead of localstorage\n\nimport {toJS, autorun} from \"mobx\";\nimport {set} from \"mobx\";\n\nexport const MobxPersist = async (key: string, observableInstance: any) => {\n\n  const v = typeof localStorage !== \"undefined\" && localStorage.getItem(key);\n  if (v) {\n    // if (observableInstance.replace) observableInstance.replace(v);\n    // else if (typeof v === \"object\") {\n    //   Object.keys(v).forEach((k) => (observableInstance[k] = v[k]));\n    // } else observableInstance = v;\n    setTimeout(() => set(observableInstance, JSON.parse(v)), 300);\n  }\n  autorun(() => {\n    // localStorage.setItem(key, change.object.toJSON());\n    // localStorage.setItem(key, change.newValue);\n    typeof localStorage !== \"undefined\" && localStorage.setItem(key, JSON.stringify(toJS(observableInstance)));\n  });\n\n};\n"]},"metadata":{},"sourceType":"module"}